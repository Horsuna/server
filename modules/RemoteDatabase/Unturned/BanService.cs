// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

// 
// This source code was auto-generated by Web Services Description Language Utility
//Mono Framework v2.0.50727.1433
//
using System;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.ComponentModel;

[WebServiceBinding(Name="BanServicePort", Namespace="http://www.gw-systems.info/BanService")]
public partial class BanService : SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback GetBansOperationCompleted;
    
    public BanService() {
        this.Url = "http://www.zombieland.ml/BanService";
    }
    
    public event GetBansCompletedEventHandler GetBansCompleted;
    
    [SoapDocumentMethodAttribute("", RequestNamespace="http://ws.unturned.zombieland.ml/", ResponseNamespace="http://ws.unturned.zombieland.ml/", 
	                             ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    [return: XmlElementAttribute("return")]
    public steamBan[] GetBans() {
        object[] results = this.Invoke("GetBans", new object[0]);
        return ((steamBan[])(results[0]));
    }
    
    public IAsyncResult BeginGetBans(AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetBans", new object[0], callback, asyncState);
    }
    
    public steamBan[] EndGetBans(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((steamBan[])(results[0]));
    }
    
    public void GetBansAsync() {
        this.GetBansAsync(null);
    }
    
    public void GetBansAsync(object userState) {
        if ((this.GetBansOperationCompleted == null)) {
            this.GetBansOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBansCompleted);
        }
        this.InvokeAsync("GetBans", new object[0], this.GetBansOperationCompleted, userState);
    }
    
    private void OnGetBansCompleted(object arg) {
        if ((this.GetBansCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetBansCompleted(this, new GetBansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

/// <remarks/>
[SerializableAttribute()]
[XmlTypeAttribute(Namespace="http://ws.unturned.zombieland.ml/")]
public partial class steamBan {
    
    private string steamIDField;
    
    private string nameField;
    
    private string bannedByField;
    
    private DateTime banTimeField;
    
    private bool banTimeSpecifiedField;
    
    private int expiresField;
    
    private string reasonField;
    
    /// <remarks/>
    [XmlAttributeAttribute(Namespace="")]
    public string SteamID {
        get {
            return this.steamIDField;
        }
        set {
            this.steamIDField = value;
        }
    }
    
    /// <remarks/>
    [XmlAttributeAttribute(Namespace="")]
    public string Name {
        get {
            return this.nameField;
        }
        set {
            this.nameField = value;
        }
    }
    
    /// <remarks/>
    [XmlAttributeAttribute(Namespace="")]
    public string BannedBy {
        get {
            return this.bannedByField;
        }
        set {
            this.bannedByField = value;
        }
    }
    
    /// <remarks/>
    [XmlAttributeAttribute(Namespace="")]
    public System.DateTime BanTime {
        get {
            return this.banTimeField;
        }
        set {
            this.banTimeField = value;
        }
    }
    
    /// <remarks/>
    [XmlIgnore()]
    public virtual bool BanTimeSpecified {
        get {
            return this.banTimeSpecifiedField;
        }
        set {
            this.banTimeSpecifiedField = value;
        }
    }
    
    /// <remarks/>
    [XmlAttributeAttribute(Namespace="")]
    public int Expires {
        get {
            return this.expiresField;
        }
        set {
            this.expiresField = value;
        }
    }
    
    /// <remarks/>
    [XmlAttributeAttribute(Namespace="")]
    public string Reason {
        get {
            return this.reasonField;
        }
        set {
            this.reasonField = value;
        }
    }
}

public partial class GetBansCompletedEventArgs : AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetBansCompletedEventArgs(object[] results, Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public steamBan[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((steamBan[])(this.results[0]));
        }
    }
}

public delegate void GetBansCompletedEventHandler(object sender, GetBansCompletedEventArgs args);
