//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.18408
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Configuration;

using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.Collections;

using UnityEngine;

using Unturned;
using Unturned.Http;

namespace Unturned
{
    public class RemoteDatabase : IDataHolder
    {
        private String m_banUrl;
        private String m_host;
        private string m_creditUrl;
        private XmlSerializer m_banSerializer;
        
        
        public void Init()
        {
            Unturned.ConfigFile config = Unturned.ConfigFile.ReadFile(@"Config/database.cfg");
            m_host = config.getConfig("host");
            m_banUrl = config.getConfig("banUrl");
            m_creditUrl = config.getConfig("creditUrl");
            
            m_banSerializer = new XmlSerializer(typeof(BanList));
            
            Console.WriteLine("Remote Database initialized: Host: {0} BanURL: {1}",
                              m_host,
                              m_banUrl
                              );
        }

        public int GetCredits(string steamId)
        {
            CreditMessage msg = null;

			HttpRequest request = new HttpRequest(m_host + m_creditUrl + "/" + steamId);
			Stream stream = request.DoGet();
            XmlSerializer serializer = new XmlSerializer(typeof(CreditMessage));
			msg = serializer.Deserialize(new StreamReader(stream)) as CreditMessage;
            
            return msg.Balance;
        }

        public void SaveCredits(string steamId, int count)
        {
			XmlSerializer serializer = new XmlSerializer(typeof(CreditMessage));
			MemoryStream mStream = new MemoryStream();
			serializer.Serialize(mStream, new CreditMessage(steamId, count));
			mStream.Seek(0, SeekOrigin.Begin);
			Stream reader = new HttpRequest(m_host + m_creditUrl).DoPost(new StreamReader(mStream).ReadToEnd());
            reader.Close();
        }

        public void AddBan(IBanEntry banEntry)
        {
			XmlSerializer serializer = new XmlSerializer(typeof(BanEntry));
			MemoryStream mStream = new MemoryStream();
			serializer.Serialize(mStream, banEntry);
			mStream.Seek(0, SeekOrigin.Begin);
			Stream reader = new HttpRequest(m_host + m_banUrl).DoPost(new StreamReader(mStream).ReadToEnd());
			reader.Close();
        }

        public void RemoveBan()
        {
            throw new NotImplementedException();
        }

        public void AddStructure(string structureStr)
        {
            throw new NotImplementedException();
        }

        public Dictionary<string, IBanEntry> LoadBans()
        {
			Dictionary<string, IBanEntry> bans = new Dictionary<string, IBanEntry>();

			HttpRequest req = new HttpRequest(m_host + m_banUrl);
			Stream stream = req.DoGet();

			BanList banList = m_banSerializer.Deserialize(new XmlTextReader(stream)) as BanList;
			foreach (BanEntry entry in banList.bans)
			{
				bans.Add( entry.SteamID, entry );
			}

#if DEBUG
			Console.WriteLine("Loaded bans with " + bans.Count + " entries.");
#endif

			return bans;
        }
    }
}

