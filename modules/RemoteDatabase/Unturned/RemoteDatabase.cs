//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.18408
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Configuration;

using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.Collections;

using UnityEngine;

using Unturned;

namespace Unturned
{
    public class RemoteDatabase : IDataHolder
    {
        private String m_banUrl;
        private String m_host;
        private string m_creditUrl;
        private XmlSerializer m_banSerializer;
        
        
        public void Init()
        {
            Unturned.ConfigFile config = Unturned.ConfigFile.ReadFile(@"Config/database.cfg");
            m_host = config.getConfig("host");
            m_banUrl = config.getConfig("banUrl");
            m_creditUrl = config.getConfig("creditUrl");
            
            m_banSerializer = new XmlSerializer(typeof(BanEntry));
            
            Console.WriteLine("Remote Database initialized: Host: {0} BanURL: {1}",
                              m_host,
                              m_banUrl
                              );
        }

        public int GetCredits(string steamId)
        {
            CreditMessage msg = null;

            RestClient.GetRequest(m_host + m_creditUrl + "/" + steamId, new RestClient.ResponseProcessDelegate(delegate(Stream stream){
                XmlSerializer serializer = new XmlSerializer(typeof(CreditMessage));
                msg = serializer.Deserialize(new StreamReader(stream)) as CreditMessage;
            }));

            return msg.Balance;
        }

        public void SaveCredits(string steamId, int count)
        {
            StreamReader reader = RestClient.PostRequest(m_host + m_creditUrl, new CreditMessage(steamId, count));
            reader.Close();
        }

        public void AddBan(IBanEntry banEntry)
        {
            StreamReader reader = RestClient.PostRequest(m_host + m_banUrl, banEntry);
            reader.Close();
        }

        public void RemoveBan()
        {
            throw new NotImplementedException();
        }

        public void AddStructure(string structureStr)
        {
            throw new NotImplementedException();
        }

        public Dictionary<string, IBanEntry> LoadBans()
        {
			Dictionary<string, IBanEntry> bans = new Dictionary<string, IBanEntry>();

			BanService service = new BanService();
			foreach (steamBan ban in service.GetBans())
			{
				bans.Add(ban.SteamID, new BanEntry(ban.Name, ban.SteamID, ban.Reason, ban.BannedBy, ban.BanTime));
			}

			return bans;
        }
    }
}

