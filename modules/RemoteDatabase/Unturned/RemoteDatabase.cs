//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.18408
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Configuration;

using System.IO;
using System.Net;
using System.Text;
using System.Xml.Serialization;
using System.Collections.Generic;
using Unturned;

namespace Unturned
{
    public class RemoteDatabase : IDataHolder
    {
        private readonly string m_userAgent = "Unturned";
        private readonly string m_xmlContentType = "application/xml";

        private String m_banUrl;
        private String m_host;
        private string m_creditUrl;
        private XmlSerializer m_banSerializer;
        
        
        public void Init()
        {
            Unturned.ConfigFile config = Unturned.ConfigFile.ReadFile(@"Config/database.cfg");
            m_host = config.getConfig("host");
            m_banUrl = config.getConfig("banUrl");
            m_creditUrl = config.getConfig("creditUrl");
            
            m_banSerializer = new XmlSerializer(typeof(BanEntry));
            
            Console.WriteLine("Remote Database initialized: Host: {0} BanURL: {1}",
                              m_host,
                              m_banUrl
                              );
        }

        public int GetCredits(string steamId)
        {
            TextReader reader = RestClient.GetRequest(m_host + m_creditUrl + "/" + steamId);
            XmlSerializer serializer = new XmlSerializer(typeof(CreditMessage));
            CreditMessage msg = serializer.Deserialize(reader) as CreditMessage;
            return msg.Balance;
        }

        public void SaveCredits(string steamId, int count)
        {
            RestClient.PostRequest(m_host + m_creditUrl, new CreditMessage(steamId, count));
        }

        public void AddBan(IBanEntry banEntry)
        {
            RestClient.PostRequest(m_host + m_banUrl, banEntry);
        }

        public void RemoveBan()
        {
            throw new NotImplementedException();
        }

        public void AddStructure(string structureStr)
        {
            throw new NotImplementedException();
        }

        public Dictionary<string, IBanEntry> LoadBans()
        {
            HttpRequest request = new HttpRequest(m_host + m_banUrl);

            request.UserAgent = m_userAgent;
            request.ContentType = m_xmlContentType;
            request.Method = WebRequestMethods.Http.Get;
            //request.Credentials = CredentialCache.DefaultCredentials;

            request.SetHeader("Connection", "close");

            Console.WriteLine("Initializing ban list request");

            // Initializing result
            Dictionary<string, IBanEntry> bans = new Dictionary<string, IBanEntry>();

            // Get the response.
            try
            {
                TextReader responseStream = request.DoGet();

                XmlSerializer ser = new XmlSerializer(typeof(BanList));
                BanList banList = ser.Deserialize(responseStream) as BanList;
                Console.WriteLine("Retreived {0} ban entries!", banList.bans.Count);

                foreach (IBanEntry entry in banList.bans) 
                {
                    bans.Add(entry.SteamID, entry);
                }

                return bans;
            }
            catch (WebException e)
            {
                Console.WriteLine("Something went wrong while loading ban table: " + e.Message);
                return null;
            }
        }
    }
}

