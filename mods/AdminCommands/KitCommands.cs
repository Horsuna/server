//
//  Author:
//    Paál Gyula paalgyula@gmail.com
//
//  Copyright (c) 2015, (c) GW-Systems Kft. All Rights Reserved!
//
//  All rights reserved.
//
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in
//       the documentation and/or other materials provided with the distribution.
//     * Neither the name of the [ORGANIZATION] nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
//  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
//  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
//  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
//  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
//  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
//  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
//  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
//  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.18444
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using CommandHandler;
using UnityEngine;
using System.Collections.Generic;

namespace AdminCommands
{
    public class KitCommands
    {
        private Dictionary<String, Kits.SpawnKit> kits;

        public KitCommands()
        {
            this.InitKits();
            CommandList.add (new Command (0, new CommandDelegate (this.RequestKit), new string[] {
                "kit"
            }));
        }

        private void InitKits() 
        {
            kits = new Dictionary<String, Kits.SpawnKit>();
            this.AddKit(new Kits.PoliceKit());

            // Clothes
            this.AddKit(new Kits.NinjaKit());
            this.AddKit(new Kits.GhillieKit());

            // Weapons
            this.AddKit(new Kits.TimberKit());
            this.AddKit(new Kits.ShotgunKit());
            this.AddKit(new Kits.MapleKit());

            // Equipments
            this.AddKit(new Kits.NatoKit());
            this.AddKit(new Kits.ScopeKit());

            // Experience
            this.AddKit(new Kits.ExperienceKit());
        }

        private void AddKit(Kits.SpawnKit kit) 
        {
            kits.Add(kit.GetKitName().ToLower(), kit);
        }

        private void RequestKit(CommandArgs args)
        {
            Player plr = args.sender.player;

            if ( args.Parameters.Count < 1)
            {
                PrintKits(args.sender.networkPlayer);
                return;
            }

            String kitName = args.Parameters[0].ToLower();
            Kits.SpawnKit kit;

            if ( !kits.TryGetValue(kitName, out kit) )
            {
                Reference.Tell(args.sender.networkPlayer, "There's no kit named " + kitName); 
                return;
            }
            else
            {
                // Checking permission
                if ( kit.Permission <= UserList.getPermission(args.sender.steamid) ) 
                {
                    if ( plr.credit < kit.Cost ) // Not enough credit
                    {
                        Reference.Tell(args.sender.networkPlayer, String.Format("You don't have enough credit. You need {0} more", kit.Cost - plr.credit)); 
                    }
                    else
                    {
                        plr.credit -= kit.Cost;
                        this.Spawn(kit.Items, plr.transform.position);
                        // Additional functions for kit
                        kit.Additional(args.sender);
                    }
                }
            }

        }

        private void Spawn(int[] items, Vector3 position)
        {
            // Spawning
            for (int i = 0; i < items.Length; i++) {
                int num = items [i];
                SpawnItems.spawnItem (num, 1, position);
            }
        }

        private void PrintKits(NetworkPlayer player)
        {
            String availableKits = "";
            
            foreach (KeyValuePair<String, Kits.SpawnKit> pair in kits)
            {
                if ( pair.Value.Permission == 0)
                    availableKits += pair.Key + ", ";
            }
            
            Reference.Tell(player, "Available kits: " + availableKits );
        }

    }
}

