//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.0
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using CommandHandler;
using System.Threading;
using System.Collections.Generic;
using System.IO;
using System.Collections;

namespace AdminCommands
{
	public class HomeCommands : MonoBehaviour
	{
		private Dictionary<string, Vector3> playerHomes = new Dictionary<string, Vector3>();
		private Dictionary<string, float> usedHomeCommand = new Dictionary<string, float>();

		void Start()
		{			
			if (!File.Exists("Unturned_Data/Managed/mods/AdminCommands/playerHomes.txt")) {
				StreamWriter streamWriter = new StreamWriter("Unturned_Data/Managed/mods/AdminCommands/playerHomes.txt", true);
				streamWriter.WriteLine("");
				streamWriter.Close();
			}
			
			string[] homes = File.ReadAllLines("Unturned_Data/Managed/mods/AdminCommands/playerHomes.txt");
			foreach (string homeEntry in homes ) 
			{
				string[] homeStruct = homeEntry.Split(new char[]{':'});
				string steamID = homeStruct[0];
				
				string[] posStruct = homeStruct[1].Split(new char[]{','});
				String posX = posStruct[0];
				string posY = posStruct[1];
				string posZ = posStruct[2];
				Vector3 value4 = new Vector3 (Convert.ToSingle(posX), Convert.ToSingle(posY), Convert.ToSingle(posZ));
				this.playerHomes[steamID] = value4;
			}

			Command setHomeCommand = new Command(0, new CommandDelegate (this.SetHome), new string[]{
				"sethome"
			});
			setHomeCommand.description = "Sets your home (if enabled)";
			CommandList.add (setHomeCommand);
			
			Command teleportHomeCommand = new Command(0, new CommandDelegate (this.Home), new string[]{
				"home"
			});
			teleportHomeCommand.description = "Teleports to your home (if enabled)";
			CommandList.add(teleportHomeCommand);
		}

		private void SetHome (CommandArgs args)
		{
			Vector3 location = args.sender.position;
			// FIXME: re-set delay message
			//Reference.Tell (args.sender.networkPlayer, "Setting home... Stand still for 20 seconds.");
			Reference.Tell (args.sender.networkPlayer, "Setting your home...");
			this.setPlayerhome (args.sender, location);
		}
		
		private bool setPlayerhome (BetterNetworkUser user, Vector3 location)
		{
			int i = 20;
			bool result;
			// FIXME: fix the delay!!!
			/*while (i > 0) {
				if (!user.position.Equals (location)) {
					Reference.Tell (user.networkPlayer, "Sethome cancelled");
					result = false;
					return result;
				}
				Reference.Tell (user.networkPlayer, "Setting home in " + i + " seconds");
				i--;
				System.Threading.Thread.Sleep (1000);
			}*/
			string steamid = user.steamid;

			if (this.playerHomes.ContainsKey(steamid)) 
			{
				string[] array = File.ReadAllLines ("Unturned_Data/Managed/mods/AdminCommands/playerHomes.txt");
				File.Delete ("Unturned_Data/Managed/mods/AdminCommands/playerHomes.txt");
				StreamWriter streamWriter = new StreamWriter("Unturned_Data/Managed/mods/AdminCommands/playerHomes.txt", true);
				for (int j = 0; j < array.Length; j++) {
					if (!array [j].StartsWith (steamid)) {
						streamWriter.WriteLine (array [j]);
					}
				}
				streamWriter.Close ();
			}

			StreamWriter writer = new StreamWriter("Unturned_Data/Managed/mods/AdminCommands/playerHomes.txt", true);
			writer.WriteLine(string.Concat (new object[]{
				steamid,
				":",
				location.x,
				",",
				location.y,
				",",
				location.z
			}));
			writer.Close ();
			this.playerHomes[steamid] = location;
			Reference.Tell(user.networkPlayer, "Home set.");
			result = true;

			return result;
		}

		private void Home(CommandArgs args)
		{
			BetterNetworkUser user = args.sender;
			if (!this.usedHomeCommand.ContainsKey (user.steamid)) {
				Vector3 originalposition = user.position;
				Reference.Tell (user.networkPlayer, "Teleporting home... Stand still for 5 seconds.");
				StartCoroutine("TeleportHome", new object[]{
					user,
					originalposition
				});
			} else {
				if (UnityEngine.Time.realtimeSinceStartup - this.usedHomeCommand[user.steamid] > 60f || UserList.getPermission(user.steamid) > 4L) {
					Vector3 originalposition = user.position;
					Reference.Tell (user.networkPlayer, "Teleporting home... Stand still for 5 seconds.");
					StartCoroutine("TeleportHome", new object[]{
						user,
						originalposition
					});
				} else {
					Reference.Tell(
						user.networkPlayer, 
						"You need to wait " + 
						System.Math.Round ((double)(60f - (UnityEngine.Time.realtimeSinceStartup - this.usedHomeCommand[user.steamid]))).ToString() + 
						" more seconds before you can teleport home again.");
				}
			}
		}

		/// <summary>
		/// Teleports the home.
		/// The object must contains the betternetworkuser and vector3 as original location!
		/// </summary>
		/// <returns>The home.</returns>
		/// <param name="args">Arguments.</param>
		private IEnumerator TeleportHome(object[] args)
		{
			Debug.Log("Teleport home coroutine started!");

			BetterNetworkUser user = (BetterNetworkUser)args[0];
			Vector3 originalPosition = (Vector3)args[1];

			int i = 10;
			bool result = false;
			
			while (i > 0) {
				if (!user.position.Equals (originalPosition)) {
					Reference.Tell (user.networkPlayer, "Teleportation cancelled");
					result = false;
					break;
				}
				i--;
				yield return new WaitForSeconds(0.5f);
			}
			
			if (user.position.Equals(originalPosition)) {
				this.teleportUserTo (user, this.playerHomes [user.steamid]);
				Reference.Tell (user.networkPlayer, "Teleported home.");
				NetworkEvents.triggerOnRegionUpdate();
				this.usedHomeCommand [user.steamid] = UnityEngine.Time.realtimeSinceStartup;
				yield return result;
			}
			
			yield return false;
		}

		/// <summary>
		/// Delays the receiving enabled.
		/// </summary>
		/// <returns>Enumerator for coroutine.</returns>
		/// <param name="user">User.</param>
		private IEnumerator DelayReceivingEnabled(BetterNetworkUser user)
		{
			yield return new WaitForSeconds(2);
			Network.SetReceivingEnabled (user.networkPlayer, 0, true);
		}

		private void teleportUserTo(BetterNetworkUser user, Vector3 target)
		{
			user.position = target;
			user.player.gameObject.GetComponent<Life> ().networkView.RPC ("tellStatePosition", RPCMode.All, new object[]{
				target,
				user.rotation
			});

			user.player.gameObject.GetComponent<NetworkInterpolation> ().tellStatePosition_Pizza (target, user.rotation);
			Network.SetReceivingEnabled(user.networkPlayer, 0, false);
			StartCoroutine("DelayReceivingEnabled", user);
		}
	}
}

