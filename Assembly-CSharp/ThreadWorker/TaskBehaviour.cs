//
//  TaskBehaviour.cs
//
//  Author:
//       Paál Gyula <paalgyula@gmail.com>
//
//  Copyright (c) 2015 (c) GW-Systems Kft. All Rights Reserved!
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//------------------------------------------------------------------------------
// <auto-generated>
//     Ezt a kódot eszköz generálta.
//     Futásidejű verzió:4.0.30319.0
//
//     Ennek a fájlnak a módosítása helytelen viselkedést eredményezhet, és elvész, ha
//     a kódot újragenerálják.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

using Unturned;
using System.Threading;
using System.Diagnostics;

namespace Unturned.ThreadWorker
{
	public class TaskBehaviour : MonoBehaviour
	{
		// THreads
		private Thread announceThread;
		private Thread saveThread;
		private Thread resourceMonitorThread;

		private int announceTimeout = 60 * 8;
		private bool shutdownRequested;

		private bool shouldSave = false;

		public int AnnounceTimeout { 
			get
			{
				return this.announceTimeout;
			}
			set
			{
				this.announceThread.Interrupt();
				this.announceTimeout = value;
			}
		}

		private void restartAnnouncerThread()
		{
			if ( announceThread != null && announceThread.IsAlive )
				announceThread.Abort();

			announceThread = new Thread(this.AnnounceThread);
			announceThread.Start();
		}

		void Start()
		{
			restartAnnouncerThread();
			this.resourceMonitorThread = new Thread(this.MonitorResources);
			resourceMonitorThread.Start();
		}

		void Update()
		{
			if (shutdownRequested)
			{
				Console.WriteLine("Memory owerflow. Shutdown initiated");
				NetworkChat.sendAlert("Restarting the server... (takes max 20sec)");

				// Offing network
				Network.SetSendingEnabled(0, false);
				Network.isMessageQueueRunning = false;

				NetworkTools.save();
				Application.Quit();
			}

			if (shouldSave) 
			{
				shouldSave = false;
				Console.WriteLine("Saving world");
				NetworkTools.save();
			}
		}

		private Process getUnturnedProcess()
		{
			Process[] processList = Process.GetProcesses();

			foreach ( Process proc in processList )
			{
				if ( proc.ProcessName.ToLower().Trim().StartsWith("unturned") )
					return proc;
			}
			
			return null;
		}

		private void MonitorResources()
		{
			Thread.CurrentThread.Name = "Memory manager thread";

			while (true)
			{
				//long usedBytes = System.GC.GetTotalMemory(false);
				// get the current process
				// Process[] currentProcesses = System.Diagnostics.Process.GetProcessesByName("Unturned.x86");
					
				// get the physical mem usage
				Process proc = getUnturnedProcess();
				if (proc != null)
				{
					long usedBytes = proc.PrivateMemorySize64;
					//                          Kb     Mb
					double megs = usedBytes / 1024 / 1024;

					if ( megs > 500 )
						this.shutdownRequested = true;
					else
					{
						Console.WriteLine("The current app using " + megs.ToString("F") + "Mb RAM");
						if ( megs > 490 )
							System.GC.Collect();
					}
				}
				else
				{
					Console.WriteLine("Process not found... Sleepin'");
				}

				Thread.Sleep(1000 * 60); // 60 sec sleep
			}
		}

		private void AnnounceThread()
		{
			Thread.CurrentThread.Name = "Announcer thread";
			while (true)
			{
				shouldSave = true;
				Console.WriteLine("Announcer tick");
				Thread.Sleep(1000 * announceTimeout);
			}
		}
	}
}

